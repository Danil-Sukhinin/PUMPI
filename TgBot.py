import asyncio
import aiosqlite
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from datetime import datetime

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –•–∞—Ä–¥–∫–æ–¥–∏–Ω–≥ –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ.
BOT_TOKEN = "8003843825:AAH4vkd9phOfX2TnEK_xIDXrrFu7ssKAUtQ"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "bot_database.db"

async def setup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, 
            username TEXT, 
            preferences TEXT, 
            location_lat REAL, 
            location_lon REAL
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS points_of_interest (
            poi_id INTEGER PRIMARY KEY, 
            name TEXT, 
            address TEXT, 
            latitude REAL, 
            longitude REAL, 
            description TEXT, 
            category TEXT, 
            ratings REAL, 
            reviews_count INTEGER
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS events (
            event_id INTEGER PRIMARY KEY, 
            name TEXT, 
            description TEXT, 
            date_time TEXT, 
            location_id INTEGER, 
            FOREIGN KEY (location_id) REFERENCES points_of_interest (poi_id)
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS subscriptions (
            sub_id INTEGER PRIMARY KEY AUTOINCREMENT, 
            user_id INTEGER, 
            subscription_type TEXT, 
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )""")
        await db.execute("""INSERT OR IGNORE INTO points_of_interest 
            (name, address, latitude, longitude, description, category, ratings, reviews_count) 
            VALUES 
            ('–†–æ—Å—Ç–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å', '–ö—Ä–µ–º–ª—å, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 47.2315, 39.7233, '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–∞–º—è—Ç–Ω–∏–∫', 'historical', 4.9, 120), 
            ('–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 47.2332, 39.7267, '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞', 'park', 4.5, 200), 
            ('–ú—É–∑–µ–π –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ò—Å–∫—É—Å—Å—Ç–≤–∞', '–ú—É–∑–µ–π–Ω–∞—è —É–ª., –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 47.2301, 39.722, '–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞', 'art', 4.8, 98)""")
        await db.commit()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await setup_database()

    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot=bot, storage=storage)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command("start"))
    async def start_cmd(message: types.Message):
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                await cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (message.from_user.id,))
                user = await cursor.fetchone()
                if not user:
                    await cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (message.from_user.id, message.from_user.username))
                    await db.commit()
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–∏–¥ –ø–æ –†–æ—Å—Ç–æ–≤—É-–Ω–∞-–î–æ–Ω—É.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/find_poi - –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\n/set_location - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n/help - –ü–æ–º–æ—â—å")
        await asyncio.sleep(0.5)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_poi
    @dp.message(Command("find_poi"))
    async def find_poi_cmd(message: types.Message):
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                await cursor.execute("SELECT location_lat, location_lon FROM users WHERE user_id = ?", (message.from_user.id,))
                location = await cursor.fetchone()
                if not location or not all(location):
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /set_location")
                    return
                user_lat, user_lon = location
                await cursor.execute("""SELECT name, address, description, category, ratings 
                                        FROM points_of_interest 
                                        ORDER BY ABS(latitude - ?) + ABS(longitude - ?) LIMIT 5""", (user_lat, user_lon))
                pois = await cursor.fetchall()
                if not pois:
                    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç.")
                    return
                response = "üèõ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞:\n"
                for poi in pois:
                    response += f"üìç {poi[0]}\nüìÆ –ê–¥—Ä–µ—Å: {poi[1]}\n‚ÑπÔ∏è {poi[2]}\nüè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {poi[3]}\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {poi[4]}\n"
                await message.answer(response)
        await asyncio.sleep(0.5)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_location
    @dp.message(Command("set_location"))
    async def set_location_cmd(message: types.Message):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)
        await asyncio.sleep(0.5)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
    @dp.message()
    async def handle_location(message: types.Message):
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET location_lat = ?, location_lon = ? WHERE user_id = ?",
                                     (message.location.latitude, message.location.longitude, message.from_user.id))
                await db.commit()
        await message.answer("‚úÖ –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /find_poi –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(0.5)

    async def on_startup(dispatcher):
        pass

    async def on_shutdown(dispatcher):
        try:
            await dispatcher.storage.close()
            await dispatcher.storage.wait_closed()
            await bot.close()
        except TelegramRetryAfter as e:
            print(f"Telegram RetryAfter exception caught during shutdown: {e}")
            await asyncio.sleep(e.retry_after)
        except Exception as e:
            print(f"An unexpected error occurred during shutdown: {e}")

    await bot.delete_webhook()
    try:
        await bot.get_me()
        print("Bot initialized successfully.")
        await dp.start_polling(on_startup=on_startup, on_shutdown=on_shutdown)
    except Exception as e:
        print(f"An error occurred: {e}")
        await bot.close()

if __name__ == "__main__":
    asyncio.run(main())
